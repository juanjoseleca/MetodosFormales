

MODULE main

VAR
  N : 0..8;
  columna : array 1..8 of 0..8;
INIT
  columna[1] = 0 &
  columna[2] = 0 &
  columna[3] = 0 &
  columna[4] = 0 &
  columna[5] = 0 &
  columna[6] = 0 &
  columna[7] = 0 &
  columna[8] = 0
;
ASSIGN
  init(N) := 1;
  next(N) := (N + 1) mod 9;

-- Transitions must repect the following constraints.
-- 1. At each step, we place one queen.
-- 2. At each step, we cannot place a queen in the same column as a
--    previous one.
-- 3. At each step, we cannot place a queen if it has the same value
--    (row + col) as a previous one (otherwise it would be under attack).
-- 4. At each step, we cannot place a queen if it has the same value
--    (row - col) as a previous one (otherwise it would be under attack).
-- 5. Once a queen has been placed, it cannot be moved.

-- Restricciones para asegurar que se cumpla la regla 1
TRANS
  (N = 1 -> next(columna[1]) in {1..8}) &
  (N = 2 -> next(columna[2]) in {1..8}) &
  (N = 3 -> next(columna[3]) in {1..8}) &
  (N = 4 -> next(columna[4]) in {1..8}) &
  (N = 5 -> next(columna[5]) in {1..8}) &
  (N = 6 -> next(columna[6]) in {1..8}) &
  (N = 7 -> next(columna[7]) in {1..8}) &
  (N = 8 -> next(columna[8]) in {1..8})
;

-- Transition constraints to ensure (2.) follow.
TRANS N = 2 -> (
  next(columna[2]) != columna[1]
);

TRANS N = 3 -> (
  next(columna[3]) != columna[1] &
  next(columna[3]) != columna[2]
);

TRANS N = 4 -> (
  next(columna[4]) != columna[1] &
  next(columna[4]) != columna[2] &
  next(columna[4]) != columna[3]
);

TRANS N = 5 -> (
  next(columna[5]) != columna[1] &
  next(columna[5]) != columna[2] &
  next(columna[5]) != columna[3] &
  next(columna[5]) != columna[4]
);

TRANS N = 6 -> (
  next(columna[6]) != columna[1] &
  next(columna[6]) != columna[2] &
  next(columna[6]) != columna[3] &
  next(columna[6]) != columna[4] &
  next(columna[6]) != columna[5]
);

TRANS N = 7 -> (
  next(columna[7]) != columna[1] &
  next(columna[7]) != columna[2] &
  next(columna[7]) != columna[3] &
  next(columna[7]) != columna[4] &
  next(columna[7]) != columna[5] &
  next(columna[7]) != columna[6]
);

TRANS N = 8 -> (
  next(columna[8]) != columna[1] &
  next(columna[8]) != columna[2] &
  next(columna[8]) != columna[3] &
  next(columna[8]) != columna[4] &
  next(columna[8]) != columna[5] &
  next(columna[8]) != columna[6] &
  next(columna[8]) != columna[7]
);

-- Transition constraints to ensure (3.) and (4.) follow.

TRANS N = 2 -> (
  abs(next(columna[2]) - columna[1]) != 1
);

TRANS N = 3 -> (
  abs(next(columna[3]) - columna[1]) != 2 &
  abs(next(columna[3]) - columna[2]) != 1
);

TRANS N = 4 -> (
  abs(next(columna[4]) - columna[1]) != 3 &
  abs(next(columna[4]) - columna[2]) != 2 &
  abs(next(columna[4]) - columna[3]) != 1
);

TRANS N = 5 -> (
  abs(next(columna[5]) - columna[1]) != 4 &
  abs(next(columna[5]) - columna[2]) != 3 &
  abs(next(columna[5]) - columna[3]) != 2 &
  abs(next(columna[5]) - columna[4]) != 1
);

TRANS N = 6 -> (
  abs(next(columna[6]) - columna[1]) != 5 &
  abs(next(columna[6]) - columna[2]) != 4 &
  abs(next(columna[6]) - columna[3]) != 3 &
  abs(next(columna[6]) - columna[4]) != 2 &
  abs(next(columna[6]) - columna[5]) != 1
);

TRANS N = 7 -> (
  abs(next(columna[7]) - columna[1]) != 6 &
  abs(next(columna[7]) - columna[2]) != 5 &
  abs(next(columna[7]) - columna[3]) != 4 &
  abs(next(columna[7]) - columna[4]) != 3 &
  abs(next(columna[7]) - columna[5]) != 2 &
  abs(next(columna[7]) - columna[6]) != 1
);

TRANS N = 8 -> (
  abs(next(columna[8]) - columna[1]) != 7 &
  abs(next(columna[8]) - columna[2]) != 6 &
  abs(next(columna[8]) - columna[3]) != 5 &
  abs(next(columna[8]) - columna[4]) != 4 &
  abs(next(columna[8]) - columna[5]) != 3 &
  abs(next(columna[8]) - columna[6]) != 2 &
  abs(next(columna[8]) - columna[7]) != 1
);

-- Transition constraints to ensure (5.) follow.

TRANS
  (N > 1 -> next(columna[1]) = columna[1]) &
  (N > 2 -> next(columna[2]) = columna[2]) &
  (N > 3 -> next(columna[3]) = columna[3]) &
  (N > 4 -> next(columna[4]) = columna[4]) &
  (N > 5 -> next(columna[5]) = columna[5]) &
  (N > 6 -> next(columna[6]) = columna[6]) &
  (N > 7 -> next(columna[7]) = columna[7]) &
  (N > 8 -> next(columna[8]) = columna[8])
;

-- Definimos nuestro estado de aceptacion

DEFINE
  aceptacion := N = 0;

-- La siguiente especificacion sera violada generando soluciones.

SPEC AG ! aceptacion;

-- LTLSPEC ! F aceptacion;